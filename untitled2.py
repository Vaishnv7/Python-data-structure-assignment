# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cXbd4bhrcpq2tT-lOAbqwZKFYbf6GsQh

1. Write a code to reverse a string
"""

name = "vaishnav k"
print(name)

name[ : :-1]



"""2. Write a code to count the number of vowels in a string.

"""

str = "he is a pilot in australia"

vowels = ["a", "e", "i", "o", "u"]
count = 0
for char in str:
    if char in vowels:
        count += 1

print("Number of vowels in the given string is: ", count)



""" 3.Write a code to check if a given string is a palindrome or not."""

str_to_check = input ( "enter a string")
if str_to_check == str_to_check[ : : -1]:
  print("it is a palindrome")
else:
  print("it is not a palindrome")



"""4. Write a code to check if two given strings are anagrams of each other.

"""

def check_anagrams(a1,a2):
  if sorted(a1)==sorted(a2):
    print("a1 and a2 are anagrams")
  else:
    print("a1 and a2 are not anagrams")

a1 = "fried"
a2 = "fired"
check_anagrams(a1,a2)



"""5.Write a code to find all occurrences of a given substring within another strings"""

myStr = "I am a data scientist in a reputed company"
substring = "a"
str_len = len(myStr)
sub_len = len(substring)
sub_indices = []
for i in range(str_len - sub_len):
    if myStr[i:i + sub_len] == substring:
        sub_indices.append(i)
print("The string is:", myStr)
print("The substring is:", substring)
print("The starting indices of the occurrences of {} in the string are:{}".format(substring, sub_indices))



"""6. Write a code to perform basic string compression using the counts of repeated characters"""

def solve(s):
   res = ""
   cnt = 1
   for i in range(1, len(s)):
      if s[i - 1] == s[i]:
         cnt += 1
      else:
         res = res + s[i - 1]
         if cnt > 1:
            res += str(cnt)
         cnt = 1
   res = res + s[-1]
   if cnt > 1:
      res += str(cnt)
   return res

s = "abbbaaaaaaccdaaab"
print(solve(s))





"""7.Write a code to determine if a string has all unique characters."""

str = ("word")
set(str)



"""8.Write a code to convert a given string to uppercase or lowercase"""

str=("i am a student at pw skills")
str.swapcase()



"""9.Write a code to count the number of words in a string"""

string=("it is raining today from morning")
len(string)



"""10.Write a code to concatenate two strings without using the + operator."""

s1="hello"
s2=" good morning"
s3= f"{s1}{s2}"
print(s3)



"""11. Write a code to remove all occurrences of a specific element from a lists."""

def remove_items(test_list, item):
    c = test_list.count(item)
    for _ in range(c):
        test_list.remove(item)
    return test_list

test_list = [1, 3, 4, 6, 5, 1]
item = 1
res = remove_items(test_list, item)
print("The list after removing all occurrences of", item, "is:", res)



"""12. Implement a code to find the second largest number in a given list of integers

"""

list =[10,30,20,40,90,60,80]
sorted(list)

print("second largest no is:",list[-1])



"""13.Create a code to count the occurrences of each element in a list and return a dictionary with elements as keys and their counts as values."""

list1=["car","bike","bus","car"]
ele="car"
x=[i for i in list1 if i==ele]
print("the element",ele,"occurs",len(x),"times")

from typing import Counter
Counter(["car","bike","bus","car"])



"""14. Write a code to reverse a list in-place without using an
 built-in reverse functions
"""

list=[1,2,3,4,5,6,7,8,9]
rev_list=list[ : :-1]
print(rev_list)



"""15. Implement a code to find and remove duplicates from a list while preserving the original order of elements."""

def remove_duplicates(lst):
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result

my_list = [1, 2, 3, 2, 4, 3, 5, 1]
unique_list = remove_duplicates(my_list)
print("Original list:", my_list)
print("List with duplicates removed:", unique_list)



"""16.Create a code to check if a given list is sorted (either in ascending or descending order) or not."""

def is_sorted_ascending(lst):
    return all(lst[index] <= lst[index + 1] for index in range(len(lst) - 1))


list_1 = [1, 2, 3, 4, 5]
if is_sorted_ascending(list_1):
    print("The list is sorted in ascending order.")
else:
    print("The list is not sorted in ascending order.")

"""17.Write a code to merge two sorted lists into a single sorted list."""

my_list1 = ["blue","black","green"]
my_list2 = ["red","white"]
my_list1.extend(my_list2)
sorted(my_list1)



"""18.Implement a code to find the intersection of two given lists."""

a=[10,20,30,40,50,60,70]
b=[40,60,70,80,90]

intersection=list(set(a)&set(b))
print(intersection)



"""19.Create a code to find the union of two lists without duplicates."""

a=[10,20,30,40,50,60,70]
b=[40,60,70,80,90]

union=list(set(a)|set(b))
print(union)



"""20.Write a code to shuffle a given list randomly without using an
 built-in shuffle functions.
"""

import random

def shuffle_list(lst):
    shuffled = lst[:]
    n = len(shuffled)
    for i in range(n - 1, 0, -1):
        j = random.randint(0, i)
        shuffled[i], shuffled[j] = shuffled[j], shuffled[i]
    return shuffled

my_list = [1, 2, 3, 4, 5]
shuffled_list = shuffle_list(my_list)
print("Original list:", my_list)
print("Shuffled list:", shuffled_list)



"""21. Write a code that takes two tuples as input and returns a new tuple containing elements that are
common to both input tuples
"""

def common_elements(tuple1, tuple2):
    set1 = set(tuple1)
    set2 = set(tuple2)
    common = set1.intersection(set2)
    return tuple(common)

tuple1 = (1, 2, 3, 4, 5)
tuple2 = (4, 5, 6, 7, 8)
result_tuple = common_elements(tuple1, tuple2)
print("Common elements:", result_tuple)



"""22.Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the intersection of these two sets"""

def get_set_from_input():
    input_str = input("Enter a set of integers separated by commas: ")
    elements = map(int, input_str.split(','))
    return set(elements)

def main():
    print("Enter the first set:")
    set1 = get_set_from_input()

    print("Enter the second set:")
    set2 = get_set_from_input()

    intersection = set1.intersection(set2)

    print("Intersection of the two sets:", intersection)

if __name__ == "__main__":
    main()

"""23.Write a code to concatenate two tuples. The function should take two tuples as input and return a new tuple containing elements from both input tuples.

"""

tuple1=(1,2,3,4,5)
tuple2=(6,7,8,9,0)
tuple=(tuple1,tuple2)
print(tuple)

"""24.Develop a code that prompts the user to input two sets of strings. Then print the elements that are present in the first set but not in the second set."""

def get_set_from_input():
    input_str = input("Enter a set of strings: ")
    elements = [element.strip() for element in input_str.split(',')]
    return set(elements)
def main():
    print("Enter the first set:")
    set1 = get_set_from_input()

    print("Enter the second set:")
    set2 = get_set_from_input()

    difference = set1 - set2
    print("Elements present in the first set but not in the second set:", difference)

if __name__ == "__main__":
    main()

"""25.Create a code that takes a tuple and two integers as input. The function should return a new tuple containing elements from the original tuple within the specified range of indices"""

tuple1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)

result_tuple = tuple1[1:4]
print("Original tuple:", tuple1)
print("New tuple containing elements within the specified range:", result_tuple)

"""26.Write a code that prompts the user to input two sets of characters. Then print the union of these two sets"""

set1 = set(input("enter the first set of characters:").split(","))
set2 = set(input("enter the second set of characters:").split(","))

union= (set1|set2)

print("First set:", set1)
print("Second set:", set2)
print("union:",union)

"""27. Develop a code that takes a tuple of integers as input. The function should return the maximum and
minimum values from the tuple using tuple unpacking

"""

t1 = (10,20,30,40,50)

max_value= max(t1)
min_value= min(t1)

print("tuple:",t1)
print("maximum value:",max_value)
print("minimum value:",min_value)

"""28.Create a code that defines two sets of integers. Then print the union
intersection and difference of these
two sets
"""

set1 = {10,20,30,40,50}
set2 = {40,50,60,70,80}

union= set1|set2
intersection = set1 & set2
difference= set1-set2


print("union:",union)
print("intersection:",intersection)
print("difference:",difference)

"""29.Write a code that takes a tuple and an element as input. The function should return the count of
occurrences of the given element in the tuple.
"""

def count_occurrences(tuple_input, element):
    return tuple_input.count(element)


my_tuple = (1, 2, 3, 4, 2, 2, 5)
element_to_count = 2
print(count_occurrences(my_tuple, element_to_count))

"""30. Develop a code that prompts the user to input two sets of strings. Then print the symmetric difference of
these two sets.
"""

def get_string_set_from_user():
    strings = input("Enter a set of strings separated by spaces: ").split()
    return set(strings)

def main():
    print("Enter elements for the first set:")
    set1 = get_string_set_from_user()

    print("\nEnter elements for the second set:")
    set2 = get_string_set_from_user()

    symmetric_difference = set1.symmetric_difference(set2)

    print("\nSymmetric Difference of the two sets:")
    print(symmetric_difference)

if __name__ == "__main__":
    main()

"""31.Write a code that takes a list of words as input and returns a dictionary where the keys are unique words
and the values are the frequencies of those words in the input list.
"""

def word_frequency(words):
    frequency_dict = {}
    for word in words:
        frequency_dict[word] = frequency_dict.get(word, 0) + 1
    return frequency_dict

# Example usage:
word_list = ["apple", "banana", "apple", "orange", "banana", "apple"]
frequency_dict = word_frequency(word_list)
print(frequency_dict)

"""32.Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are
common keys the values should be added together.
"""

items = ['pen','book','bag']
count = [5,3,6]
item_count ={}

for item,count in zip(items,count):
  item_count[item]=count
print(item_count)

"""33.Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of
keys as input and return the corresponding value. If any of the keys do not exist in the dictionary the
function should return None
"""



"""34. Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You
can choose whether to sort in ascending or descending order.
"""

def sort_dict_by_values(dictionary):

    return dict(sorted(dictionary.items(), key=lambda item: item[1]))

my_dict = {'a': 3, 'b': 1, 'c': 2}
sorted_dict = sort_dict_by_values(my_dict)
print(sorted_dict)

"""35.Write a code that inverts a dictionary swapping keys and values. Ensure that the inverted dictionary
correctly handles cases where multiple keys have the same value by storing the keys as a list in the
inverted dictionary.
"""

old_dict = {'A': 67, 'B': 23, 'C': 45, 'D': 56, 'E': 12, 'F': 69, 'G': 67, 'H': 23}

new_dict = dict([(value, key) for key, value in old_dict.items()])

print ("Original dictionary is : ")
print(old_dict)

print()

print ("Dictionary after swapping is :  ")
print("keys: values")
for i in new_dict:
    print(i, " :  ", new_dict[i])

